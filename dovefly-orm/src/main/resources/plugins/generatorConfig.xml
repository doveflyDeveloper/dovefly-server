<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 引入配置文件,在整个配置文件中就可以使用${propertyKey}的方式来引用配置项,
        如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用 -->
    <properties resource="jdbc.properties"/>

    <!-- 指定数据连接驱动jar地址,mybatis-generator-maven-plugin可在POM插件管理的地方配置 -->
    <!--<classPathEntry location="${classPath}"/>-->

    <!--
    context:生成一组对象的环境,一般一个数据库一个context
    id:必选，上下文id，用于在生成错误时提示
    defaultModelType:指定生成对象的样式
        1，conditional：类似hierarchical；
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
    targetRuntime:
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
    introspectedColumnImpl：类全限定名，用于扩展MBG
     -->
    <context id="DB2Tables" defaultModelType="flat" targetRuntime="MyBatis3">

        <!-- 注释 -->
        <!--<commentGenerator>-->
            <!--&lt;!&ndash; 是否去除自动生成的注释 &ndash;&gt;-->
            <!--<property name="suppressAllComments" value="false"/>-->
            <!--&lt;!&ndash; 是否去除注释的时间戳&ndash;&gt;-->
            <!--<property name="suppressDate" value="true"/>-->
            <!--&lt;!&ndash; 是否添加备注信息到注释&ndash;&gt;-->
            <!--<property name="addRemarkComments" value="true"/>-->
        <!--</commentGenerator>-->

        <!-- 原注释太乱,用自定义注释 -->
        <commentGenerator type="cn.dovefly.plugin.mybatis.MyCommentGenerator"></commentGenerator>

        <!-- jdbc连接 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}"/>

        <!-- java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；-->
        <javaTypeResolver>
            <!--
            针对NUMERIC和DECIMAL字段,是否强制使用bigDecimal，否则会自动按照长度及小数位转化以下类型（Long, Integer, Short, etc.）
            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
            false：默认,
                scale 大于 0;length 大于 18： 使用BigDecimal;
                scale 等于 0;length [10,18]：使用Long；
                scale 等于 0;length [5,9]：  使用Integer；
                scale 等于 0;length 小于 5：  使用Short；
            -->
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="cn.dovefly.orm.employee.entity" targetProject="src/main/java">
            <!-- 是否在当前路径下新加一层schema,eg：false路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
            <property name="enableSubPackages" value="true"/>
            <!-- 是否针对string类型的字段在set的时候进行trim处理 -->
            <property name="trimStrings" value="true"/>
            <!-- 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；-->
            <property name="constructorBased" value="true"/>
        </javaModelGenerator>

        <!-- 生成mapxml映射文件 -->
        <sqlMapGenerator targetPackage="mybatis.mapper.employee" targetProject="src/main/resources">
            <!-- 是否在当前路径下新加一层schema,eg：false路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 生成mapxml对应client，也就是接口dao -->
        <javaClientGenerator targetPackage="cn.dovefly.orm.employee.repo" targetProject="src/main/java" type="XMLMAPPER">
            <!-- 是否在当前路径下新加一层schema,eg：false路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名-->
        <table tableName="test_employee" domainObjectName="Employee" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">

            <!-- 生成实体类的父类 -->
            <property name="rootClass" value="cn.dovefly.orm.base.entity.BaseEntity"/>

            <!-- generatedKey用于生成生成主键的方法，
            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
            column:主键的列名；
            sqlStatement：要生成的selectKey语句，有以下可选项：
                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
             -->
            <!-- <generatedKey column="id" sqlStatement="Mysql"/> -->
            <generatedKey column="id" sqlStatement="JDBC"/>

            <!-- 忽略列，将不在Bean对象生成相应的字段 -->
            <ignoreColumn column="is_valid" />
            <ignoreColumn column="create_time" />
            <ignoreColumn column="update_time" />

            <!-- 指定列的java数据类型 (可将TEXT类型字段强制转为VARCHAR,否则会将TEXT字段单独生成到BLOB对象)-->
            <columnOverride column="is_valid" javaType="java.lang.Integer" jdbcType="INTEGER" />
            <columnOverride column="emp_summary" jdbcType="VARCHAR" />
            <columnOverride column="emp_desc" jdbcType="VARCHAR" />
        </table>
    </context>
</generatorConfiguration>